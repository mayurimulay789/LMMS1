const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
const Certificate = require('../models/Certificate');

// Configuration
const CERTIFICATES_DIR = path.join(__dirname, '../../public/certificates');
const BASE_URL = process.env.BASE_URL || 'http://localhost:2000';

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/lms', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', async () => {
  console.log('Connected to MongoDB for sync');
  await syncCertificates();
  mongoose.disconnect();
  console.log('Sync completed and disconnected from MongoDB');
});

async function syncCertificates() {
  try {
    // Read the certificates directory
    const files = fs.readdirSync(CERTIFICATES_DIR);
    const pdfFiles = files.filter(file => file.endsWith('.pdf'));

    console.log(`Found ${pdfFiles.length} PDF files in ${CERTIFICATES_DIR}`);

    let createdCount = 0;
    let skippedCount = 0;
    let existingCount = 0;

    for (const filename of pdfFiles) {
      const certificateId = filename.replace('.pdf', '');
      
      try {
        // Check if certificate already exists and is valid
        const existingCert = await Certificate.findOne({ 
          certificateId, 
          isValid: true 
        });

        if (existingCert) {
          console.log(`✓ Certificate ${certificateId} already exists in DB`);
          existingCount++;
          continue;
        }

        // Parse timestamp from filename for completionDate (format: CERT_timestamp_hash.pdf)
        const parts = certificateId.split('_');
        const timestamp = parts[1] ? parseInt(parts[1]) : Date.now();
        const completionDate = new Date(timestamp);

        // Prepare new certificate data with defaults/placeholders
        const newCert = new Certificate({
          certificateId,
          certificateNumber: generateCertificateNumber(), // Generate new number
          user: null, // Will cause validation error; log and skip creation
          course: null,
          enrollment: null,
          studentName: 'Unknown (Synced)',
          courseName: 'Unknown Course (Synced)',
          instructor: 'Unknown Instructor (Synced)',
          completionDate,
          issueDate: new Date(),
          grade: 'Pass',
          finalScore: 100,
          hoursCompleted: 0,
          skills: [],
          pdfPath: path.join('public/certificates', filename).replace(/\\/g, '/'),
          pdfUrl: `/certificates/${filename}`,
          verificationUrl: `${BASE_URL}/verify-certificate/${certificateId}`,
          qrCodeData: `${BASE_URL}/verify-certificate/${certificateId}`,
          isValid: true,
          metadata: {
            autoGenerated: true,
            triggeredBy: 'sync-script',
            verificationCount: 0,
          },
        });

        // Attempt to save; if validation fails due to required fields, log and skip
        await newCert.save();
        console.log(`✓ Created missing certificate record for ${certificateId}`);
        createdCount++;

      } catch (error) {
        if (error.name === 'ValidationError') {
          console.log(`⚠ Skipped ${certificateId}: Validation error (missing required refs like user/course). Manual intervention needed.`);
          skippedCount++;
        } else {
          console.error(`✗ Error processing ${certificateId}:`, error.message);
          skippedCount++;
        }
      }
    }

    console.log('\n=== Sync Summary ===');
    console.log(`Existing: ${existingCount}`);
    console.log(`Created: ${createdCount}`);
    console.log(`Skipped/Errored: ${skippedCount}`);
    console.log(`Total PDFs: ${pdfFiles.length}`);

    // Log skipped files for manual review
    if (skippedCount > 0) {
      console.log('\nSkipped files (need manual DB entry):');
      // Note: In a full script, you could collect and list them here
    }

  } catch (error) {
    console.error('Error during sync:', error);
  }
}

function generateCertificateNumber() {
  const year = new Date().getFullYear();
  const month = String(new Date().getMonth() + 1).padStart(2, '0');
  const random = Math.random().toString(36).substr(2, 6).toUpperCase();
  return `CERT-${year}${month}-${random}`;
}

// Run the sync if this file is executed directly
if (require.main === module) {
  syncCertificates();
}
